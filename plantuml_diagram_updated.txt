@startuml
class UMLGenerationApp {
 - Configuration config
 + UMLGeneriationApp(Configuration config)
 + void generate()
}

UMLGenerationApp --> Configuration

class Processor {
 - Configuration config
 - List<Analyzer> pipeline

 + Processor(Configuration config)
 - void createPipline()
 + AnalyzerBundle executePipeline()
}

Processor --> Configuration
Processor ..> Analyzer
Processor ..> AnalyzerBundle

class Configuration {
 + List<String> classNames
 + String mainClassName
 + Path directory
 + boolean parseAncestors
 + int accessModifier
 + boolean display
}

class AnalyzerBundle {
 + List<SootClass> classes
 + List<Relationship> relationships
 + String UML
 + Scene scene
 + OutputStream out
}

interface Filter {
 + boolean shouldProcess(SootClass class)
 + boolean shouldProcess(SootMethod method)
 + boolean shouldProcess(SootField field)
}

class PublicFilter implements Filter {
 
}

class ProtectedFilter implements Filter {

}

abstract class Analyzer {
 - List<Filters> filters
 - Configuration config
 - AnalyzerBundle bundle
 + Analyzer(List<Filter> filters, Configuration config)
 + AnalyzerBundle execute(AnalyzerBundle bundle)
 + void addFilter(Filter filter)
 # boolean passesFilters(SootClass c)
 # boolean passesFilters(SootMethod m)
 # boolean passesFilters(SootField f)
}

Analyzer ..> AnalyzerBundle

class SootAnalyzer extends Analyzer {
}

package SOOT <<Node>> {
class SceneBuilder
}

SootAnalyzer ..> SOOT
SootAnalyzer ..> SootClass

class RelationshipAnalyzer extends Analyzer {
}

RelationshipAnalyzer ..> Relationship
RelationshipAnalyzer ..> Relation


class Relationship {
 + SootClass from
 + SootClass to
 + Relation rel
}

Relationship --> Relation
Relationship --> SootClass

enum Relation {
}

class FilterAnalyzer extends Analyzer {
}

class UMLAnalyzer extends Analyzer {
}

class AncestorAnalyzer extends Analyzer {
}

class Main {
 + {static} void Main(String[] args)
}

Main ..> UMLGenerationApp
Main ..> Configuration
@enduml