@startuml
skinparam linetype ortho

package App {
	class Runner {
	  + void Runner()
	  + {static} void main(String[])
	  - {static} Configuration populateConfiguration(String[])
	  - {static} Map parse(String[])
	  - {static} void addToConfiguration(String,List<String>,Configuration)
	  - {static} String parseModifier(String)
	}
	class Configuration {
	  + Logger logger
	  + List<String> classNames
	  + String mainClassName
	  + Path projectDirectory
	  + boolean parseAncestors
	  + String accessModifier
	  + boolean display
	  + Path imageLocation
	  + boolean includeObject
	  + void Configuration()
	}
	class Processor {
	  - List<Analyzer> pipeline
	  - AnalyzerBundle bundle
	  + AnalyzerBundle executePipeline()
	}
}

package Analyzer {
	abstract Analyzer {
	  ~ List<Filter> filters
	  ~ Configuration config
	  ~ AnalyzerBundle bundle
	  # @Inject void Analyzer(Configuration config, List<Filter> filters)
	  + {abstract} AnalyzerBundle execute(AnalyzerBundle)
	  + void addFilter(Filter)
	  # boolean passesFilters(SootClass)
	  # boolean passesFilters(SootMethod)
	  # boolean passesFilters(SootField)
	}

	class AnalyzerBundle <<Singleton>> {
	  + List<SootClass> classes
	  + List<Relationship> relationships
	  + List<Message> messages
	  + Scene scene
	}

	class SootAnalyzer extends Analyzer {
	  + void SootAnalyzer(Configuration,List<Filter>)
	  + AnalyzerBundle execute(AnalyzerBundle)
	}

	class InheritanceAnalyzer extends Analyzer {
	  - void generateExtendsRelationships(SootClass,List<Relationship>)
	  - void generateImplementsRelationships(SootClass,List<Relationship>)
	}

	class AssociationAnalyzer extends Analyzer {
	}

	class DependencyAnalyzer extends Analyzer {
	}

	class SequenceAnalyzer extends Analyzer {
	}

	class AncestorAnalyzer extends Analyzer {
	}
	class UMLAnalyzer extends Analyzer {
	}
	class SceneAnalyzer extends Analyzer {
	}
	class UMLParser {
	  + {static} String parse(SootClass)
	  + {static} String parse(SootField)
	  + {static} String parse(SootMethod)
	  + {static} String parse(Type)
	  + {static} String parse(Relationship)
	  + {static} String parse(Relation)
	  + {static} String trimQualifiedName(String)
	  + {static} String getAccessModifier(int)
	  + {static} String getStaticAbstractModifier(int)
	  + {static} String getClassType(int)
	}
}

package Filters {
	interface Filter {
		+ {abstract} boolean shouldProcess(SootClass)
		+ {abstract} boolean shouldProcess(SootMethod)
		+ {abstract} boolean shouldProcess(SootField)
	}
	class PackagePrivateFilter implements Filter{
	}
	class PublicFilter implements Filter{
	}
	class ProtectedFilter implements Filter{
	}
	class DollarSignFilter implements Filter{
	}
	class ClinitFilter implements Filter{
	}
	class RelationshipFilter implements Filter{
	  - AnalyzerBundle bundle 
	  + @Inject RelationshipFilter(AnalyzerBundle bundle)
	}
	
	class ClassNameFilter implements Filter{
	  - Configuration config
	  + @Inject ClassNameFilter(Configuration config)
	}
	
	class JDKFilter implements Filter{
	}
}

package Models {
	enum Relation {
	  + {static} Relation ASSOCIATION
	  + {static} Relation EXTENDS
	  + {static} Relation IMPLEMENTS
	  + {static} Relation DEPENDENCY
	}
	class Relationship {
	  - SootClass from
	  - SootClass to
	  - Relation relation
	  - int cardinality
	  + void Relationship(SootClass,Relation,SootClass,int)
	}
	class ReturnMessage extends Message{
	  - String returnType
	}
	abstract Message {
	  - SootClass methodCallingClass
	  - SootMethod method
	  + {abstract} getPlantUMLString();
	}
	class CallMessage extends Message{
	  - String parameters;
	}
}

package Soot {
	class SceneBuilder {
	}
}

package Modules {
	abstract PipelineModule {
	  + {abstract} @Provides @Named("analyzers") List<Analyzer> getUserAnalyzers()
	  + @Provides @Named("Resolution") MethodResolver getMethodResolver() 
	}
	class DefaultPipelineModule extends PipelineModule{
	}
	class ProcessorModule {
	  + @Provides @Named("pipeline") List<Analyzer> getPipeline(@Named("analyzers") List<Analyzers> userAnalyzers)
	}	
}

'-----------------App relationships----------------
Runner ..> Configuration
Runner ..> Processor
Processor --> AnalyzerBundle
Processor --> Analyzer
'---------------------------------------------------

'----------------Analyzer relationships-------------
Analyzer --> Filter
Analyzer --> Configuration
Analyzer --> AnalyzerBundle
AnalyzerBundle --> Relationship
AnalyzerBundle --> Message
InheritanceAnalyzer ..> Relationship
AssociationAnalyzer ..> Relationship
DependencyAnalyzer ..> Relationship
SceneAnalyzer ..> SceneBuilder
SequenceAnalyzer ..> UMLParser
UMLAnalyzer ..> UMLParser
UMLParser ..> Relationship
UMLParser ..> Relation
'---------------------------------------------------

'----------------Filter Relationships---------------
RelationshipFilter --> AnalyzerBundle
ClassNameFilter --> Configuration
'---------------------------------------------------

'-----------------Model Relationships---------------
Relationship --> Relation
'---------------------------------------------------


@enduml