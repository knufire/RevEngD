@startuml
skinparam linetype ortho

skinparam class {
BackgroundColor<<Decorator>> PaleGreen
}
skinparam class {
BackgroundColor<<Component>> PaleGreen
}
skinparam class {
BackgroundColor<<BadDecorator>> PaleGreen
}
class App {

+ void App()
+ {static} void main(String[])

}

class java.lang.SecurityManager <<Component>> {
# boolean inCheck
- boolean initialized
- {static} ThreadGroup rootGroup
- {static} boolean packageAccessValid
- {static} String[] packageAccess
- {static} Object packageAccessLock
- {static} boolean packageDefinitionValid
- {static} String[] packageDefinition
- {static} Object packageDefinitionLock

- boolean hasAllPermission()
+ boolean getInCheck()
+ void SecurityManager()
# Class[] getClassContext()
# ClassLoader currentClassLoader()
- ClassLoader currentClassLoader0()
# Class<*> currentLoadedClass)
# int classDepth(String)
# int classLoaderDepth()
- int classLoaderDepth0()
# boolean inClass(String)
# boolean inClassLoader()
+ Object getSecurityContext()
+ void checkPermission(Permission)
+ void checkPermission(Permission,Object)
+ void checkCreateClassLoader()
- {static} ThreadGroup getRootGroup()
+ void checkAccess(Thread)
+ void checkAccess(ThreadGroup)
+ void checkExit(int)
+ void checkExec(String)
+ void checkLink(String)
+ void checkRead(FileDescriptor)
+ void checkRead(String)
+ void checkRead(String,Object)
+ void checkWrite(FileDescriptor)
+ void checkWrite(String)
+ void checkDelete(String)
+ void checkConnect(String,int)
+ void checkConnect(String,int,Object)
+ void checkListen(int)
+ void checkAccept(String,int)
+ void checkMulticast(InetAddress)
+ void checkMulticast(InetAddress,byte)
+ void checkPropertiesAccess()
+ void checkPropertyAccess(String)
+ boolean checkTopLevelWindow(Object)
+ void checkPrintJobAccess()
+ void checkSystemClipboardAccess()
+ void checkAwtEventQueueAccess()
- {static} String[] getPackages(String)
+ void checkPackageAccess(String)
+ void checkPackageDefinition(String)
+ void checkSetFactory()
+ void checkMemberAccess(Class<*>,int)
+ void checkSecurityAccess(String)
- Class<*> currentLoadedClass0)
+ ThreadGroup getThreadGroup()
~ {static} void <clinit>()

}

class SecurityManagerBackdoor {

+ void SecurityManagerBackdoor(SecurityManager)
+ void checkAccept(String,int)

}

interface java.lang.Appendable {

+ {abstract} Appendable append(CharSequence)
+ {abstract} Appendable append(CharSequence,int,int)
+ {abstract} Appendable append(char)

}



abstract SecurityManagerBackDoorDecorator <<Bad Decorator>> {
# SecurityManager decorated
# boolean isDoorOpen

+ void SecurityManagerBackDoorDecorator(SecurityManager)
+ {abstract} void checkAccept(String,int)
+ void checkAccess(Thread)
+ void checkAccess(ThreadGroup)
+ void checkConnect(String,int)
+ void checkConnect(String,int,Object)
+ void checkCreateClassLoader()
+ void checkDelete(String)
+ void checkExec(String)
+ void checkExit(int)
+ void checkListen(int)
+ void checkMulticast(InetAddress)
+ void checkPackageAccess(String)
+ void checkPackageDefinition(String)
+ void checkPrintJobAccess()
+ void checkPropertiesAccess()
+ void checkRead(FileDescriptor)
+ void checkSecurityAccess(String)
+ void checkSetFactory()
+ void checkWrite(FileDescriptor)
+ void checkWrite(String)
+<font color=”#FF0000”>boolean getInCheck()</font>
+<font color=”#FF0000”>Object getSecurityContext()</font>
+<font color=”#FF0000”>boolean checkTopLevelWindow(Object)</font>
+<font color=”#FF0000”>ThreadGroup getThreadGroup()</font>

}

SecurityManagerBackDoorDecorator  <|-- SecurityManagerBackdoor
java.lang.SecurityManager  <|-- SecurityManagerBackDoorDecorator
SecurityManagerBackDoorDecorator -[#Green]->  java.lang.SecurityManager : <<Decorates>>
App ..>  java.lang.SecurityManager
SecurityManagerBackdoor ..>  java.lang.SecurityManager
App ..>  SecurityManagerBackdoor
@enduml
