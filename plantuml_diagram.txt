@startuml
class RevEngDRelationship {
  + SootClass from
  + SootClass to
  + Relation rel
}

enum Relation {
}

RevEngDRelationship --> Relation
RevEngDRelationship --> SootClass


class SootLoader {
  - int modifier
  - String projectDir
  - List<String> classesToParse
  + List<SootClass> load()
  + SootLoader(String projectDir, List<String> classes, int modifier)
  + SootLoader(String projectDir, int modifier)
  + SootLoader(String projectDir)
}

package SOOT <<Node>> {
 class SceneBuilder
}

SootLoader ..> SOOT
SootLoader ..> SootClass

class GeneratorFactory {
  - List<SootClass> classes
  - DisplayFactory displayFactory
  + GeneratorFactory(List<SootClasses> classes, DisplayFactory displayFactory)
}

GeneratorFactory ..> Generator
GeneratorFactory ..> RelationshipGenerator
GeneratorFactory --> DisplayFactory
GeneratorFactory --> SootClass

abstract class Generator {
  # List<SootClass> classes
  # DisplayFactory displayFactory

  + Generatory(List<SootClass> classes)
  + {abstract} Displayable createDisplay()
}

class RelationshipGenerator extends Generator{
  + Displayable createDisplay()
}

Generator --> SootClass
Generator ..> RevEngDRelationship
Generator --> DisplayFactory


class Controller {
  - GeneratorFactory genFac
  + Controller(GeneratorFactory genFac)
  + void execute()
}

note left of Controller 
	Generator generator = genFac.create(cmd);
	Displayable disp = generator.createDisplay();
	disp.display();
end note

Controller ..> Generator
Controller --> GeneratorFactory
Controller ..> Displayable

class Main {
  + {static} void Main(String[] args)
}

Main ..> Controller
Main ..> SootLoader
Main ..> GeneratorFactory
Main ..> DisplayFactory

interface Displayable {
  + void display()
}

class DisplayFactory {
  + Displayable create(String plantUML)
}

class PlantUMLDisplay implements Displayable {
  + PlantUMLDisplay(String syntax)
  + void display()
}

DisplayFactory ..> Displayable
DisplayFactory ..> PlantUMLDisplay
@enduml