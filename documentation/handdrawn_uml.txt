@startuml
skinparam linetype ortho


package Soot {
	class SceneBuilder {
	}
	class SootClass{
	}
}

package App {
	class Runner {
	  + {static} void main(String[])
	}
	class PropertiesSetter{
	  - String propfile
	  - String[] cliArgs;
	  + PropertiesSetter(String propfile, String[] cliArgs)
	  - void setSystemProperties()
	}
	
	class Processor {
	  - List<Analyzer> pipeline
	  - AnalyzerBundle bundle
	  + AnalyzerBundle executePipeline()
	}
}

package Analyzer {
	abstract Analyzer {
	  ~ List<Filter> filters
	  ~ AnalyzerBundle bundle
	  + Analyzer(List<Filter> filters)
	  + {abstract} AnalyzerBundle execute(AnalyzerBundle)
	  + void addFilter(Filter)
	  # boolean passesFilters(SootClass)
	  # boolean passesFilters(SootMethod)
	  # boolean passesFilters(SootField)
	}

	class AnalyzerBundle {
	  + List<OdysseyClass> classes
	  + List<OdysseyRelationship> relationships
	  + List<OdysseyMessage> messages
	  + Scene scene
	}

	class SootAnalyzer extends Analyzer {
	}

	class InheritanceAnalyzer extends Analyzer {
	  - void generateExtendsRelationships(SootClass,List<OdysseyRelationship>)
	  - void generateImplementsRelationships(SootClass,List<OdysseyRelationship>)
	}

	class AssociationAnalyzer extends Analyzer {
	}

	class DependencyAnalyzer extends Analyzer {
	}

	class SequenceAnalyzer extends Analyzer {
	  - MethodResolver resolver
	  + SequenceAnalyzer(MethodResolver resolver)
	}

	class AncestorAnalyzer extends Analyzer {
	}
	class UMLAnalyzer extends Analyzer {
	}
	class SceneAnalyzer extends Analyzer {
	}
	class DIPAnalyzer extends Analyzer {
	}
	
	class UMLParser {
	  + {static} String parse(SootClass)
	  + {static} String parse(SootField)
	  + {static} String parse(SootMethod)
	  + {static} String parse(Type)
	  + {static} String parse(Relationship)
	  + {static} String parse(Relation)
	  + {static} String trimQualifiedName(String)
	  + {static} String getAccessModifier(int)
	  + {static} String getStaticAbstractModifier(int)
	  + {static} String getClassType(int)
	}
	interface MethodResolver {
	  + SootMethod resolveMethod(Unit methodUnit, Scene scene)
	}
	class GreedyMethodResolver implements MethodResolver{
	}		
}

package SomeoneElsesProject{
	class ChainMethodResolver implements MethodResolver{
	}
	class UnionMethodResolver implements MethodResolver{
	}
	class IntersectionMethodResolver implements MethodResolver{
	}
}

package Filters {
	interface Filter {
		+ {abstract} boolean shouldProcess(SootClass)
		+ {abstract} boolean shouldProcess(SootMethod)
		+ {abstract} boolean shouldProcess(SootField)
	}
	class PackagePrivateFilter implements Filter{
	}
	class PublicFilter implements Filter{
	}
	class ProtectedFilter implements Filter{
	}
	class DollarSignFilter implements Filter{
	}
	class ClinitFilter implements Filter{
	}
	class RelationshipFilter implements Filter{
	  - AnalyzerBundle bundle 
	  + @Inject RelationshipFilter(AnalyzerBundle bundle)
	}
	
	class ClassNameFilter implements Filter{	  
	}
	
	class JDKFilter implements Filter{
	}
}

package Models {
	enum Relation {
	  + {static} Relation ASSOCIATION
	  + {static} Relation EXTENDS
	  + {static} Relation IMPLEMENTS
	  + {static} Relation DEPENDENCY
	}
	interface OdysseyRelationship{
	  + SootClass getFromClass()
	  + SootClass getToClass()
	  + Relation getRelation()
	  + int getCardinality()
	  + String toUMLString()
	}
	abstract AbstractOdsseyRelationship implements OdysseyRelationship{
	  - OdysseyRelationship inner
	  + AbstractOdsseyRelationship(OdysseyRelationship inner)
	  + {abstract} String toUMLString()
	}	
	class Relationship implements OdysseyRelationship{
	  - SootClass from
	  - SootClass to
	  - Relation relation
	  - int cardinality
	  + void Relationship(SootClass,Relation,SootClass,int)
	}
	class DIPViolationOdysseyRelationship extends AbstractOdsseyRelationship{
	}
	
	interface OdysseyMessage{
	  + SootClass getMethodCallingClass()
	  + SootMethod getMethod()
	  + SootClass getReceivingClass()
	  + toUMLString()
	}
	
	abstract AbstractOdysseyMessage implements OdysseyMessage{
	  - OdysseyMessage inner
	  + AbstractOdysseyMessage(OdysseyMessage inner)
	  + {abstract} String toUMLString()
	}
	
	class ReturnMessage extends Message{
	  - String returnType
	}
	
	abstract Message implements OdysseyMessage{
	  - SootClass methodCallingClass
	  - SootMethod method
	  # String getCallingClassName()
	  # String getReceivingClassName()
	  # String getMethodName()
	  + {abstract} String toUMLString()
	}
	class CallMessage extends Message{
	  - String parameters;
	}

	
	interface OdysseyClass {
		+ SootClass getSootClass()
		+ String toUMLString()
	}
	abstract AbstractOdysseyClass implements OdysseyClass{
		- OdysseyClass inner
		+ OdysseyClass(OdysseyClass inner)
		+ {abstract} toUMLString()
	}
	class OdysseyRootClass implements OdysseyClass{
	    - SootClass
		+ OdysseyRootClass(SootClass clazz)
	}
	class SingletonOdysseyClass extends AbstractOdysseyClass{
	}
	class DIPViolationOdysseyClass extends AbstractOdysseyClass{
	}
	
}

package Modules {
	abstract PipelineModule {
	  + {abstract} @Provides @Named("analyzers") List<Analyzer> getUserAnalyzers()
	  + @Provides @Named("Resolution") MethodResolver getMethodResolver() 
	}
	class DefaultPipelineModule extends PipelineModule{
	}
	class ProcessorModule {
	  + @Provides @Named("pipeline") List<Analyzer> getPipeline(@Named("analyzers") Queue<Analyzers> userAnalyzers)
	}	
}

'-----------------App relationships----------------
Runner ..> PropertiesSetter
Runner ..> Processor
Processor --> AnalyzerBundle
Processor --> Analyzer
'---------------------------------------------------

'----------------Analyzer relationships-------------
Analyzer --> Filter
Analyzer --> AnalyzerBundle
AnalyzerBundle --> OdysseyClass
AnalyzerBundle --> OdysseyRelationship
AnalyzerBundle --> OdysseyMessage
InheritanceAnalyzer ..> Relationship
AssociationAnalyzer ..> Relationship
DependencyAnalyzer ..> Relationship
SceneAnalyzer ..> SceneBuilder
SequenceAnalyzer ..> UMLParser
SequenceAnalyzer ..> MethodResolver
UMLAnalyzer ..> UMLParser
UMLParser ..> OdysseyRelationship
UMLParser ..> Relation
SootAnalyzer ..> OdysseyRootClass
DIPAnalyzer --> DIPViolationOdysseyClass
DIPAnalyzer --> DIPViolationOdysseyRelationship
'---------------------------------------------------

'----------------Filter Relationships---------------
RelationshipFilter --> AnalyzerBundle
'---------------------------------------------------

'-----------------Model Relationships---------------
Relationship --> Relation
OdysseyRootClass --> SootClass
'---------------------------------------------------


@enduml