@startuml
skinparam linetype ortho

skinparam class {
BackgroundColor<<adapter>> DarkRed
}
skinparam class {
BackgroundColor<<adaptee>> DarkRed
}
skinparam class {
BackgroundColor<<target>> DarkRed
}
class problem.client.App {

+ void App()
+ {static} void main(String[])

}

interface java.util.Iterator {

+ {abstract} boolean hasNext()
+ {abstract} Object next()
+ void remove()
+ void forEachRemaining(Consumer)

}

interface java.util.Enumeration {

+ {abstract} boolean hasMoreElements()
+ {abstract} Object nextElement()

}

class problem.client.IteratorToEnum {
-  iterator

+ void IteratorToEnum(Iterator)
+ boolean hasMoreElements()
+ Object nextElement()

}

class problem.lib.LinearTransformer {
-  enumTion

+ void LinearTransformer(Enumeration)
+ void transform(OutputStream)

}

class problem.client.IteratorToEnumTest {
~ Vector<String> vec
~ int size

+ void IteratorToEnumTest()
+ void setUp()
+ void tearDown()
+ void testAdapter()

}

class problem.lib.LinearTransformerTest {
~ LinearTransformer<String> transformer
~ String expected
~ int size

+ void LinearTransformerTest()
+ void setUp()
+ void tearDown()
+ void testTransform()

}

java.util.Enumeration  <|.. problem.client.IteratorToEnum
problem.client.IteratorToEnumTest ..>  java.util.Iterator
problem.lib.LinearTransformerTest ..>  java.util.Enumeration
problem.client.App ..>  problem.client.IteratorToEnum
problem.client.App ..>  problem.lib.LinearTransformer
problem.client.IteratorToEnumTest ..>  java.util.Enumeration
problem.client.IteratorToEnumTest ..>  problem.client.IteratorToEnum
problem.client.App ..>  java.util.Iterator
problem.client.IteratorToEnum -->  java.util.Iterator
problem.lib.LinearTransformer -->  java.util.Enumeration
problem.lib.LinearTransformerTest -->  problem.lib.LinearTransformer
@enduml
